{"version":3,"sources":["components/add_balance/AddBalance.js","components/show_balance/ShowBalance.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["AddBalance","propObject","className","BALANCE","type","value","INPUT","onChange","e","SET_INPUT","target","placeholder","INPUT_NOTE","SET_NOTE","onClick","ADD_TRANSACTION","RMV_TRANSACTION","ShowBalance","BALANCE_SHEET","length","map","transaction","date","currentBalance","style","flag","color","expense","Edit","w","h","alert","id","note","App","useState","input","setInput","inputNote","setNote","balance","setBalance","balanceSheet","setBalanceSheet","newDate","Date","appendZero","number","getDate","toLocaleString","month","getFullYear","getHours","getMinutes","getSeconds","setState","addition","parseInt","subtraction","now","SET_BALANCE","SET_BALANCESHEET","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4428392.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./AddBalance.css\";\n\nfunction AddBalance({ propObject }) {\n  return (\n    <div className=\"add-balance\">\n      <h2 className=\"balance-heading\">Total Balance: {propObject.BALANCE}</h2>\n      <input\n        className=\"input\"\n        type=\"number\"\n        value={propObject.INPUT}\n        onChange={(e) => propObject.SET_INPUT(e.target.value)}\n        placeholder=\"Enter amount >0\"\n      />\n      <br />\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={propObject.INPUT_NOTE}\n        onChange={(e) => propObject.SET_NOTE(e.target.value)}\n        placeholder=\"What is it about? (Optional)\"\n      />\n      <br />\n      <div>\n        <button\n          className=\"desposite-button\"\n          onClick={propObject.ADD_TRANSACTION}\n        >\n          Deposite\n        </button>\n        <button\n          className=\"withdraw-button\"\n          onClick={propObject.RMV_TRANSACTION}\n        >\n          Withdraw\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AddBalance;\n","import React from \"react\";\nimport \"./ShowBalance.css\";\nimport { EditIcon } from \"@chakra-ui/icons\";\n\nfunction ShowBalance({ propObject }) {\n  return (\n    propObject.BALANCE_SHEET.length > 0 && (\n      <div className=\"main-container\">\n        <p className=\"user-note\">\n          User Note : *Hover over transaction to see the note(First add it).\n          *Pencil icon will show details of respective transaction.{\" \"}\n        </p>\n        {propObject.BALANCE_SHEET.map((transaction) => {\n          return (\n            <>\n              <div className=\"transaction-container\" key={transaction.id}>\n                <p className=\"date\">{transaction.date}</p>\n                <p className=\"currentBalance\">{transaction.currentBalance}</p>\n                <p\n                  className=\"expense\"\n                  style={\n                    transaction.flag\n                      ? { color: \"rgb(96, 241, 96)\" }\n                      : { color: \"rgb(252, 69, 63)\" }\n                  }\n                >\n                  {transaction.expense}\n                </p>\n                <i className={transaction.flag ? \"arrow-up\" : \"arrow-down\"}></i>\n                <EditIcon\n                  className=\"edit\"\n                  w={22}\n                  h={22}\n                  color={\"whiteAlpha.500\"}\n                  onClick={() =>\n                    alert(\n                      \"Here is detailed information of your transaction\" +\n                        \"\\n\" +\n                        \"Transaction ID :\" +\n                        transaction.id +\n                        \"\\n\" +\n                        \"Note Available :\" +\n                        transaction.flag +\n                        \"\\n\" +\n                        \"Date & Time :\" +\n                        transaction.date +\n                        \"\\n\" +\n                        \"Expense: \" +\n                        transaction.expense +\n                        \"\\n\" +\n                        \"@ Time Main Bal.:\" +\n                        transaction.currentBalance\n                    )\n                  }\n                />\n              </div>\n              {transaction.note && (\n                <div className=\"hide\">\n                  <p>{transaction.note}</p>\n                </div>\n              )}\n            </>\n          );\n        })}\n      </div>\n    )\n  );\n}\n\nexport default ShowBalance;\n","import { useState } from \"react\";\nimport AddBalance from \"../add_balance/AddBalance\";\nimport ShowBalance from \"../show_balance/ShowBalance\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [inputNote, setNote] = useState(\"\");\n  const [balance, setBalance] = useState(0); // To show main balance.\n  const [balanceSheet, setBalanceSheet] = useState([]); //It is database where all transactions are stored\n\n  const newDate = () => {\n    let date = new Date();\n    function appendZero(number) {\n      if (number < 10) {\n        number = \"0\" + number;\n      }\n      return number;\n    }\n    return `${date.getDate()} ${date.toLocaleString(\"default\", {\n      month: \"long\",\n    })} ${date.getFullYear()} ${appendZero(date.getHours())}:${appendZero(\n      date.getMinutes()\n    )}:${appendZero(date.getSeconds())}`;\n  };\n\n  function setState(flag) {\n    const addition = balance + parseInt(input);\n    const subtraction = balance - parseInt(input);\n    flag ? setBalance(addition) : setBalance(subtraction);\n    setBalanceSheet([\n      ...balanceSheet,\n      {\n        id: Date.now(),\n        flag: flag,\n        note: inputNote,\n        date: newDate(),\n        expense: flag ? \"+\" + input : \"-\" + input,\n        currentBalance: flag ? addition : subtraction,\n      },\n    ]);\n    setInput(\"\");\n    setNote(\"\");\n  }\n  const addTransaction = () => {\n    if (input > 0 && input < 1000000) {\n      setState(true);\n    } else {\n      alert(\"Try to put value between 1-1000000\");\n      setInput(\"\");\n    }\n  };\n\n  const removeTransaction = () => {\n    if (parseInt(input) <= balance && parseInt(input) > 0) {\n      setState(false);\n    } else {\n      alert(\"You cannot remove amount more than main balance\");\n      setInput(\"\");\n    }\n  };\n  // A common shared object to avoid passing down so many props. It avoids complexity\n  const propObject = {\n    INPUT: input,\n    SET_INPUT: setInput,\n    INPUT_NOTE: inputNote,\n    SET_NOTE: setNote,\n    BALANCE: balance,\n    SET_BALANCE: setBalance,\n    BALANCE_SHEET: balanceSheet,\n    SET_BALANCESHEET: setBalanceSheet,\n    ADD_TRANSACTION: addTransaction,\n    RMV_TRANSACTION: removeTransaction,\n  };\n  return (\n    <div className=\"App\">\n      <h2 className=\"heading\">Let's track your expenses & SAVE Money !</h2>\n      <AddBalance propObject={propObject} />\n      <ShowBalance propObject={propObject} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}